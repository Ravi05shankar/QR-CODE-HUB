{"version":3,"sources":["App.js","index.js"],"names":["useStyles","makeStyles","theme","container","marginTop","title","display","justifyContent","alignItems","background","color","padding","btn","marginBottom","title1","margin","copy","dwn","marginLeft","borderRadius","onClick","App","useState","text","setText","imageUrl","setImageUrl","scanResultFile","setScanResultFile","scanResultWebCam","setScanResultWebCam","shouldScanWebCam","setShouldScanWebCam","classes","qrRef","useRef","generateQrCode","a","QRCode","toDataURL","response","console","log","Container","className","Card","CardContent","Grid","spacing","item","xl","lg","md","sm","xs","TextField","label","onChange","e","target","value","Button","variant","href","download","src","alt","Chip","current","openImageDialog","ref","delay","style","width","onError","error","onScan","result","legacyMode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e60d8bf.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\r\nimport {\r\n  Container,\r\n  Card,\r\n  CardContent,\r\n  makeStyles,\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  Chip,\r\n} from \"@material-ui/core\";\r\nimport QRCode from \"qrcode\";\r\nimport QrReader from \"react-qr-reader\";\r\n\r\nfunction App() {\r\n  const [text, setText] = useState(\"\");\r\n  const [imageUrl, setImageUrl] = useState(\"\");\r\n  const [scanResultFile, setScanResultFile] = useState(\"\");\r\n  const [scanResultWebCam, setScanResultWebCam] = useState(\"\");\r\n  const [shouldScanWebCam, setShouldScanWebCam] = useState(false);\r\n\r\n  const classes = useStyles();\r\n  const qrRef = useRef(null);\r\n\r\n  const generateQrCode = async () => {\r\n    try {\r\n      const response = await QRCode.toDataURL(text);\r\n      setImageUrl(response);\r\n      setText(\"\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  const handleErrorFile = (error) => {\r\n    console.log(error);\r\n  };\r\n  const handleScanFile = (result) => {\r\n    if (result) {\r\n      setScanResultFile(result);\r\n    }\r\n  };\r\n  const onScanFile = () => {\r\n    qrRef.current.openImageDialog();\r\n  };\r\n  const handleErrorWebCam = (error) => {\r\n    console.log(error);\r\n  };\r\n  const handleScanWebCam = (result) => {\r\n    if (result) {\r\n      setScanResultWebCam(result);\r\n    }\r\n  };\r\n\r\n  const startWebCamScan = () => {\r\n    setShouldScanWebCam(true);\r\n  };\r\n\r\n  const stopWebCamScan = () => {\r\n    setShouldScanWebCam(false);\r\n  };\r\n  // const handleClick = () => {\r\n  //   // console.info(\"You clicked the Chip.\");\r\n  // };\r\n  return (\r\n    <Container className={classes.container}>\r\n      <Card>\r\n        <h1 className={classes.title1}>QR CODE HUB</h1>\r\n        <h2 className={classes.title}>Generate Download & Scan QR Code</h2>\r\n        <CardContent>\r\n          <Grid container spacing={2}>\r\n            {/* this is for responsive purpose i am using like for small , large extra large midium extra small screen this value will be applied over there according to screen size */}\r\n\r\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n              <TextField\r\n                label=\"Enter Text Here\"\r\n                onChange={(e) => setText(e.target.value)}\r\n              />\r\n              <Button\r\n                className={classes.btn}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => generateQrCode()}\r\n              >\r\n                Generate QR Code\r\n              </Button>\r\n              <br />\r\n              <br />\r\n              <br />\r\n              {/* if imageUrl is there then qr-image will be showm over there otherwise null value will be shown\r\n              also i have applied download section whenever i have clicked on image image directly will be download to your computer  */}\r\n              {imageUrl ? (\r\n                <a href={imageUrl} download>\r\n                  <img src={imageUrl} alt=\"img\" />\r\n                  {/* <p>download qr code </p> */}\r\n\r\n                  {/* <Chip label=\"Download QR\" onClick={handleClick} /> */}\r\n                  <Chip label=\"Download QR\" onClick={true} />\r\n                </a>\r\n              ) : null}\r\n            </Grid>\r\n\r\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n              <Button\r\n                className={classes.btn}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={onScanFile}\r\n              >\r\n                Scan Qr Code File\r\n              </Button>\r\n              <QrReader\r\n                ref={qrRef}\r\n                delay={300}\r\n                style={{ width: \"100%\" }}\r\n                onError={handleErrorFile}\r\n                onScan={handleScanFile}\r\n                legacyMode\r\n              />\r\n              <h3>Scanned Code: {scanResultFile}</h3>\r\n            </Grid>\r\n\r\n            <Grid item xl={4} lg={4} md={6} sm={12} xs={12}>\r\n              <Button\r\n                className={classes.btn}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={shouldScanWebCam ? stopWebCamScan : startWebCamScan}\r\n              >\r\n                {shouldScanWebCam ? \"Stop Scanning\" : \"Scan QR Code Web Cam\"}\r\n              </Button>\r\n              {shouldScanWebCam && (\r\n                <div>\r\n                  <QrReader\r\n                    delay={300}\r\n                    style={{ width: \"100%\" }}\r\n                    onError={handleErrorWebCam}\r\n                    onScan={handleScanWebCam}\r\n                  />\r\n                  <h3>Scanned By WebCam Code: {scanResultWebCam}</h3>\r\n                </div>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n      <p className={classes.copy}>\r\n        Copyright. All rights reserved.Â© 2023 QR-CODE-HUB Company, Inc\r\n      </p>\r\n    </Container>\r\n  );\r\n}\r\n\r\n// this is css part all the classname css value applied over there\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    marginTop: 10,\r\n  },\r\n  title: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    background: \"#3f51b5\",\r\n    color: \"#fff\",\r\n    padding: 10,\r\n  },\r\n  btn: {\r\n    marginTop: 10,\r\n    marginBottom: 20,\r\n  },\r\n  title1: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    background: \"#607d8b\",\r\n    color: \"#fff\",\r\n    padding: 10,\r\n    margin: 0,\r\n  },\r\n  copy: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    padding: 10,\r\n    margin: 0,\r\n  },\r\n  dwn: {\r\n    padding: 3,\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginLeft: 15,\r\n    color: \"#2196f3\",\r\n    // backgroundColor: \"#263238\",\r\n    borderRadius: 5,\r\n    onClick: true,\r\n  },\r\n}));\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}